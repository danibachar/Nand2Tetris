// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;

    static boolean color; //true == black, false == white
    static int SCREEN_SIZE;
    static int SCREEN_WIDTH;
    static int SCREEN_HIGHT;
    static int MAX_RADIUS;

    /** Initializes the Screen. */
    function void init() {
      let screen = 16384; //begin point of screen in memory
      let color = true; //init with color on!
      let SCREEN_SIZE = 8192;
      let SCREEN_WIDTH = 511;
      let SCREEN_HIGHT = 255;
      let MAX_RADIUS = 127;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int pixel;
      let pixel = 0;
      while(pixel < SCREEN_SIZE){
        let screen[pixel] = false; //coloring to white
        let pixel = pixel + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int add, mask, maskValue;

      // According to algorithm given in class, presentation 12 page 147
      let add = (32*y) + (x/16);
      // Creating appropriate mask
      let maskValue = x & 15;
      let mask = Math._powerOfTwo(maskValue);
      //Update the x % 16 bit in the word we got from the memory
      // Writing directly to memory without usage of peek/poke is more efficient
      // No over head of the function call...
      if (color) {
        let screen[add] = screen[add] | mask;
      } else {
        let screen[add] = screen[add] & ~mask;
      }

      return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, x, y;

        //Trying to improve performance by using direct command
        if (y1 = y2) {
          do Screen._drawHLine(Math.min(x1,x2), Math.max(x1,x2), y1);
          return;
        }

        if (x1 = x2) {
          do Screen._drawVLine(Math.min(y1,y2), Math.max(y1,y2), x1);
          return;
        }

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let a = 0;
        let b = 0;
        let diff = 0;

        while (~((b > dy) | (a > dx))) {

          if (x2 < x1) { // going right -> left
            let x = x1 - a;
          } else { // going left -> right
            let x = x1 + a;
          }
          if (y2 < y1) { // going up -> down
            let y = y1 - b;
          } else { // going down -> up
            let y = y1 + b;
          }

          do Screen.drawPixel(x, y);

          if (diff < 0 ) {
            let a = a + 1;
            let diff = diff + dy;
          } else {
            let b = b + 1;
            let diff = diff - dx;
          }

        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

      //Filling out a rectangle in grid manner from top to bottom
      while( ~(y1 > y2) ) {
        do Screen.drawLine(x1, y1, x2, y1);
        let y1 = y1 + 1;
      }

      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dx, dy;
      var int r2;

      let dy = -r;
      let r2 = r*r;
      while( ~(dy > r) ) {
        let dx = Math.sqrt(r2-(dy*dy));
        do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
        let dy = dy + 1;
      }

      return;
    }

    //Private
    function void _drawHLine(int x1, int x2, int y) {
      while (~(x1 > x2)) {
        do Screen.drawPixel(x1, y);
        let x1 = x1 + 1;
      }
      return;
    }

    function void _drawVLine(int y1, int y2, int x) {
      while (~(y1 > y2)) {
        do Screen.drawPixel(x, y1);
        let y1 = y1 + 1;
      }
      return;
    }

    // I decided to remove validation to improve performance, not sure why I had bad performance
    //Make sure that the point is not out of screen bounds
    function boolean _isValidPoint(int x, int y) {
      if ((x > SCREEN_WIDTH) | (y > SCREEN_HIGHT) | (x < 0) | (y < 0)) {
        do Output.printString("Screen Error");
        return false;
      }
      return true;
    }

    //Make sure that when we draw the circle we will go out of screen bounds
    function boolean _isValidRadius(int x, int y, int r) {
      var boolean isValid;
      //validate center point
      let isValid = Screen._isValidPoint(x, y);

      //Validate radius
      if (r > MAX_RADIUS | r < 0) {
        let isValid = false;
      }

      return isValid;
    }
}
