// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */

class Memory {

    static int heapBase;
    static int heapEnd;

    static Array ram;
    static Array heap;
    static Array freeList;

    static int SIZE_IND;
    static int NEXT_IND;
    static int BLOCK_PADDING;

    /** Initializes the class. */
    function void init() {
      let ram = 0;

      let heapBase = 2048;
      let heapEnd = 16384;

      let heap = heapBase;
      let freeList = heapBase;

      let SIZE_IND = 1;
      let NEXT_IND = 0;
      let BLOCK_PADDING = 2;

      let heap[NEXT_IND] = null; // heap[0] = freeList.next
      let heap[SIZE_IND] = heapEnd - heapBase; // Heap size,  heap[1] = freeList.size
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    function Array _first_fit(int requestedBlockSize) {
      var Array block, preBlock;
      var int blockSize;

      // We are looking for blocks in the freeList
      let preBlock = freeList;

      // Error handling, if we are at the end block of the list we shell return it
      // No need to search forward, as we won't find any
      // If the selected block is not big enough we are in big problem as we run out of RAM
      if(preBlock[NEXT_IND] = null){
        return preBlock;
      }
      let block = preBlock;
      while( ~(block = null) ) {
        let blockSize = block[SIZE_IND]; // Size of the selected block
        if (blockSize > (requestedBlockSize + BLOCK_PADDING)) { // If the size is not enough, go to the next block to check
          return preBlock;
        }
        if (blockSize = (requestedBlockSize + BLOCK_PADDING)) { // If the size is not enough, go to the next block to check
          return preBlock;
        }
        let preBlock = block;
        let block = block[NEXT_IND]; // NEXT_IND == heap.next
      }

      return preBlock;
    }

    // Find the block with the best fit
    function Array best_fit(int size) {
         var Array best_block;
         var Array prev_block;
         var Array cur_block;
         var int best_size;
         var int cur_size;

         let best_block = freeList;
         let best_size = 16384 - 2048;
         let cur_block = freeList;
         let prev_block = null;

         while( ~(cur_block = null) ) {
             let cur_size = cur_block[SIZE_IND];  // Number of usable words
             if( ~(cur_size < size) & (cur_size < best_size) ) {
                 // Found new best block
                 let best_block = prev_block;    // Remember block before best block
                 let best_size = cur_size;
             }
             let prev_block = cur_block;
             let cur_block = cur_block[NEXT_IND];
         }

         return best_block;  // block just before best fit
     }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array block, newBlock, preBlock;
      var int blockSize;

      // Finding a block of size - size, by fit first algorithm
      let preBlock = Memory._first_fit(size);

      //Handel a case where the preBlock is the actual block...
      let block = preBlock;
      // This logic is b=per fetching algorithm, if we change to bestFit, we will have to change this logic
      // Not the best solution but working for firrstFit, as we know we get the previous block,
      // all we need to do is check if the previous block has enough space, if not we know the actual block, is the next one
      if ( ~(preBlock = null) & preBlock[SIZE_IND] < (size + BLOCK_PADDING)) {
        let block = preBlock[NEXT_IND];
      }

      // If the block is bigger than requested size, we can be efficient and split the block,
      // Return only the address needed, and updated the heap with the remaining Size
      let blockSize = block[SIZE_IND];
      if (blockSize > size + BLOCK_PADDING) { // Return the leftovers to the heap

        // 1) Carving the block from the segment

        //  a) Going to the end of the segment - the desire block size + the padding
        let newBlock = (block + blockSize) - (size + BLOCK_PADDING); // First we reaching the next block

        //  b) updating the next of the block we are about to return is 0, as it is not part of the freeList anymore, but an allocated piece of RAM from the heap
        let newBlock[NEXT_IND] = null;

        //  c) Updating the size
        let newBlock[SIZE_IND] = size;

        // 2) Updating the size of the remaining block
        let block[SIZE_IND] = blockSize - (size + BLOCK_PADDING);

        // 3) Updating the returned block to be the new block we carved
        let block = newBlock;
      } else {
        // If we found a block that exactly matches the size, we need to update the freeList to point to the next block in line (:
        let preBlock[NEXT_IND] = block[NEXT_IND];
        let block[NEXT_IND] = null;
      }

      //Adding padding so whomever is using the block will not override the metadata (size, next pointer)
      let block = block + BLOCK_PADDING;

      // Returns the free block
      return block;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array block;

      // Starting from the beginning of the freeList;
      let block = freeList;

      // Reaching the last block on the list, to append the freed block
      while ( ~(block[NEXT_IND] = null) ) {
        let block = block[NEXT_IND];
      }
      // Just append the freed block
      let block[NEXT_IND] = o - BLOCK_PADDING; //last block is now pointing at the freed block
      let o[NEXT_IND] = null; //the freed block pointing to no where, as it is the end of the list

      return;
    }
}
