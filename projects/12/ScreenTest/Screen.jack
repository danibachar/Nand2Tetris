// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static Array bitArray;

    static boolean color; //true == black, false == white
    static int SCREEN_SIZE;

    /** Initializes the Screen. */
    function void init() {
      let screen = 16384;
      let color = true;
      let SCREEN_SIZE = 8192;

      let bitArray = Array.new(16);
      let bitArray[0] = 1;
      let bitArray[1] = 2;
      let bitArray[2] = 4;
      let bitArray[3] = 8;
      let bitArray[4] = 16;
      let bitArray[5] = 32;
      let bitArray[6] = 64;
      let bitArray[7] = 128;
      let bitArray[8] = 256;
      let bitArray[9] = 512;
      let bitArray[10] = 1024;
      let bitArray[11] = 2048;
      let bitArray[12] = 4096;
      let bitArray[13] = 8192;
      let bitArray[14] = 16384;
      let bitArray[15] = 32768;

      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int pixel;
      let pixel = 0;
      while(pixel < SCREEN_SIZE){
        let screen[pixel] = false; //coloring to white
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int add, mask;
      // According to algorith given in class, presentation 12 page 147
      let add = (32*y) + (x/16);
      // Creating appropriate mask
      let mask = bitArray[(x & 15)];
      //Update the x % 16 bit in the word we got from the memory
      if (color) {
        let screen[add] = screen[add] | mask;
      } else {
        let screen[add] = screen[add] & ~mask;
      }

      return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    return;
    }

    //Private
    // Based on - https://www.omnicalculator.com/math/modulo - TODO - we can move this to math
    function int _mod(int dividend, int divisor) {
       var int quotient, a, res;
       let quotient = Math.divide(dividend, divisor);
       //do Output.printInt(quotient);
       let a = Math.multiply(quotient, divisor);
       //do Output.printInt(a);
       let res = dividend - a;
       //do Output.printInt(res);
       if (res < 0) {
          let res = -res;
       }
       return res;
    }
}
